As mentioned above, the plugin requires some extra work in Config.groovy to make CAS server and local parameters known to the plugin. So in application's Config.groovy you may add some lines of code below,
{code}
// cas client configuration, required by CasClientPlugin
cas {
    urlPattern = '/someurl/*'
    // urlPattern = ['/oneurl/*', '/another', '/anotheranother/*']
    disabled = false
}
environments {
    development {
        cas.loginUrl = 'https://dev.casserver.demo.com/cas/login'
        cas.validateUrl = 'https://dev.casserver.demo.com/cas/serviceValidate'
        cas.serverName = 'dev.casclient.demo.com:80'
        // cas.serviceUrl = 'http://dev.casclient.demo.com/access'
        cas.disabled = true
        cas.mocking = true
    }
    test {
        cas.loginUrl = 'https://test.casserver.demo.com/cas/login'
        cas.validateUrl = 'https://test.cas.com/cas/serviceValidate'
        cas.serverName = 'test.casclient.demo.com:80'
        // cas.serviceUrl = 'http://test.casclient.demo.com/access'
    }
    production {
        cas.loginUrl = 'https://prod.casserver.demo.com/cas/login'
        cas.validateUrl = 'https://prod.casserver.demo.com/cas/serviceValidate'
        cas.serverName = 'prod.casclient.demo.com:80'
        // cas.serviceUrl = 'http://prod.casclient.demo.com/access'
    }
}
{code}

The code above should give you a quick start, by replacing those URLs. (Please note either 'cas.serverName' or 'cas.serviceUrl' should be made available but not both; Other parameters are all required. 'cas.urlPattern' can be either String or List depending on how many resources you want to protect.)

As the CAS client library used by the plugin supports more parameters, the plugin also accepts those. It checks the availability of those optional parameters and fill them in web.xml if necessary. Please refer to the table below for details.

{table}
*Config.groovy* | *Required or Optional* | web.xml (generated by the plugin)
cas.urlPattern  | required	| <url-pattern/> in CAS filter's <filter-mapping/> (multiple values allowed by defining a list)
cas.loginUrl	| required	| value for 'edu.yale.its.tp.cas.client.filter.loginUrl' as <init-param/> for CAS filter's <filter/>
cas.validateUrl	| required	| value for 'edu.yale.its.tp.cas.client.filter.validateUrl' as <init-param/> for CAS filter's <filter/>
cas.serverName	| required*	| value for 'edu.yale.its.tp.cas.client.filter.serverName' as <init-param/> for CAS filter's <filter/>
cas.serviceUrl	| required*	| value for 'edu.yale.its.tp.cas.client.filter.serviceUrl' as <init-param/> for CAS filter's <filter/>
cas.proxyCallbackUrl    | optional	| value for 'edu.yale.its.tp.cas.client.filter.proxyCallbackUrl' as <init-param/> for CAS filter's <filter/>
cas.authorizedProxy     | optional  | value for 'edu.yale.its.tp.cas.client.filter.authorizedProxy' as <init-param/> for CAS filter's <filter/>
cas.renew	    | optional	| value for 'edu.yale.its.tp.cas.client.filter.renew' as <init-param/> for CAS filter's <filter/>
cas.redirect	| optional	| value for 'edu.yale.its.tp.cas.client.filter.redirect' as <init-param/> for CAS filter's <filter/> NEW in 1.1
cas.wrapRequest	| optional	| value for 'edu.yale.its.tp.cas.client.filter.wrapRequest' as <init-param/> for CAS filter's <filter/>
{table}
{note}
* one of 'cas.serverName' and 'cas.serviceUrl' must be available but not both
{note}

Last but not least, there are parameters to control the plugin instead of the behaviour of underlying CAS client library:

{table}
*Config.groovy*	| *Required or Optional*	| *Default*	| *Purpose*
cas.disabled	| optional	            | false	    | This param will turn the plugin on/off. If it is not available or its value is a boolean 'false', the plugin will work as it should be; If the value is a boolean 'true', the plugin will sense that and will not be functioning. It may be helpful in development stage.
cas.mocking	    | optional	            | false	    | This param is to enable/disable mocking of cas-ified user session. If it is available and its value is a boolean 'true', /cas?u=[username] is available for access which sets a session attribute to simulate a user who has passed CAS server authentication, with the given username. Obviously it is only useful when 'cas.disabled' is 'true'. It may be helpful in development stage sometimes and please use it very carefully when turn it on in test or even production environments as it opens a big security hole.
{table}
